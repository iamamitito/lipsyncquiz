{"version":3,"sources":["components/Spinner/spinner.gif","components/Lipsync/Lipsync.js","components/End/End.js","components/Nav/Nav.js","components/About/About.js","components/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Lipsync","lipsync","queens","handleAnswer","showAnswers","nextLipsync","className","id","name","artist","map","queen","textColor","won","icon","onClick","key","End","score","href","Nav","to","About","Spinner","Fragment","src","spinner","alt","style","width","margin","display","App","useState","setLipsync","setQueens","start","end","array","i","push","createArrayOfNumbers","ids","setIds","setScore","setShowAnswers","getRandomNumber","min","max","step1","step2","Math","random","floor","useEffect","getLipsync","a","randomIndex","length","randomNumber","newIds","splice","fetch","res","json","data","answer","path","exact","render","props","component","from","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bbbed40f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.9b4f9f6a.gif\";","import React from 'react';\n\nconst Lipsync = ({ lipsync, queens, handleAnswer, showAnswers, nextLipsync }) => {\n\n    return (\n        <div className=\"lipsync w-11/12 lg:w-1/2 m-auto\">\n            <div className=\"bg-white text-pink-600 p-5 flex flex-col rounded-md shadow-md text-center\">\n                <h2 className=\"text-2xl\">{lipsync.id === 129 ? \"I'm Coming Out\" : lipsync.name}</h2><small>by {lipsync.artist}</small>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-6 mt-6\">\n                {queens.map(queen => {\n                    const textColor = showAnswers ? queen.won ? 'text-green-500' : 'text-red-500' : 'text-pink-600';\n                    const icon = showAnswers ? queen.won ? <i className=\"fas fa-check\"></i> : <i className=\"fas fa-times\"></i> : null;\n                    return (<button\n                        onClick={() => handleAnswer(queen.won)}\n                        className={`bg-white p-4 ${textColor} rounded-md focus:outline-none shadow-md`}\n                        key={queen.id}>\n                        {icon} {lipsync.id === 143 && queen.won ? 'Monet X Change' : queen.name}</button>)\n                })\n                }\n            </div>\n            {showAnswers && (\n                <button className=\"float-right bg-pink-500  mt-4 p-3 rounded-md focus:outline-none shadow\" onClick={nextLipsync} >Next <i className=\"fas fa-chevron-right\"></i></button>\n            )}\n        </div>\n    );\n}\n\nexport default Lipsync;","import React from 'react';\n\nconst End = ({ score }) => {\n    return (\n        <div className=\" flex flex-col text-2xl font-semibold w-1/2 md:w-2/12 m-auto\">\n            <h1>Score: </h1>\n            <span className=\"text-pink-600 text-4xl \">{score}</span>\n            <span className=\"text-lg w-full font-light\">{score > 80 ? \"You're a winner, baby!\" : \"Learn your herstory, sis!\"}</span>\n            <a href=\"/lipsyncquiz\" className=\"bg-pink-500 my-3 py-2 px-4 shadow hover:bg-pink-600 rounded\"><i className=\"fas fa-redo\"></i></a>\n        </div>)\n}\nexport default End;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Nav = () => {\n    return (\n        <nav>\n            <ul className=\"flex mt-5 text-pink-300 text-2xl justify-between\">\n                <li><NavLink to='/lipsyncquiz'><i className=\"fas fa-crown mx-5 hover:text-pink-200\"></i></NavLink></li>\n                <li><NavLink to='/lipsyncquiz/about'><i className=\"fas fa-info mx-5 hover:text-pink-200\"></i></NavLink></li>\n            </ul>\n        </nav>\n    )\n\n}\n\nexport default Nav;","import React from 'react';\n\nconst About = () => {\n    return (\n        <div className=\"container mt-20 m-auto w-screen text-center p-4 leading-loose  text-gray-100\">\n            <div className=\"header tracking-wide\">\n                <i className=\"fas fa-info fa-3x text-pink-300\"></i>\n                <h1 className=\"text-3xl font-bold my-2\">About this app</h1>\n            </div>\n            <div className=\"info font-light tracking-wider\">\n                <p>This app uses the <span className=\"italic\"> No key no shade</span> API to fetch lipsync songs from Rupaul's Drag Race.</p>\n                <p>There's a total of 10 random lipsyncs per play.</p>\n                <p>You have to chose the queen who you think won the lipsync.</p>\n                <p>Max score: 100 points.</p>\n                <p>Version: 1.0.0</p>\n\n            </div>\n\n            <small className=\"text-pink-600 tracking-wide\">&copy;iamamitito</small>\n        </div>\n    )\n}\nexport default About;","import React from 'react';\nimport spinner from './spinner.gif';\n\nconst Spinner = () => <React.Fragment>\n    <img src={spinner} alt=\"Loading...\" style={{ width: '100px', margin: 'auto', display: 'block' }} />\n</React.Fragment>\n\nexport default Spinner;","import React, { useState, useEffect, Fragment } from 'react';\nimport Lipsync from './components/Lipsync/Lipsync';\nimport End from './components/End/End';\nimport Nav from './components/Nav/Nav';\nimport About from './components/About/About';\nimport Spinner from './components/Spinner/Spinner';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst App = () => {\n  const [lipsync, setLipsync] = useState({});\n  const [queens, setQueens] = useState([]);\n  const [ids, setIds] = useState(createArrayOfNumbers(1, 171));\n  const [score, setScore] = useState(0);\n  const [showAnswers, setShowAnswers] = useState(false);\n\n  useEffect(() => {\n    getLipsync();\n    //eslint-disable-next-line\n  }, []);\n\n  function getRandomNumber(min, max) {\n    let step1 = max - min + 1;\n    let step2 = Math.random() * step1;\n    let result = Math.floor(step2) + min;\n    return result;\n  }\n\n  function createArrayOfNumbers(start, end) {\n    let array = [];\n    for (let i = start; i <= end; i++) {\n\n      // The below lipsync ids are not found, have more than two queens or there's no clear winner\n      // 122, 131 and 124 are inaccurate\n      while (i === 0 || i === 25 || i === 38 || i === 42 || i === 43 || i === 44 || i === 45 || i === 46 || i === 47 || i === 52 || i === 55 || i === 56 || i === 60 || i === 67 || i === 72 || i === 80 || i === 84 || i === 86 || i === 93 || i === 98 || i === 101 || i === 105 || i === 112 || i === 119 || i === 120 || i === 133 || i === 135 || i === 136 || i === 137 || i === 138 || i === 144 || i === 145 || i === 146 || i === 147 || i === 151 || i === 155 || i === 157 || i === 159 || i === 163 || i === 122 || i === 131 || i === 124) {\n        i += 1;\n      }\n      array.push(i);\n    }\n    return array;\n  }\n\n  const getLipsync = async () => {\n    const randomIndex = getRandomNumber(0, ids.length - 1);\n    const randomNumber = ids[randomIndex];\n\n    const newIds = [...ids];\n    newIds.splice(randomIndex, 1)\n    setIds(newIds);\n    const res = await fetch(`https://www.nokeynoshade.party/api/lipsyncs/${randomNumber}`);\n    const data = await res.json();\n    setLipsync(data);\n    setQueens(data.queens);\n    setShowAnswers(false);\n  }\n  const handleAnswer = (answer) => {\n    // This prevents increasing score before next lipsync\n    if (!showAnswers) {\n      if (answer) {\n        //Increase the score\n        setScore(score + 10);\n      }\n    }\n    setShowAnswers(true);\n  }\n\n  return queens.length > 0 ? (\n    <Fragment>\n      <Nav />\n      <Route path=\"/lipsyncquiz\" exact render={props => (\n        <div className=\"container mt-20 m-auto w-screen text-center\">\n          <div className=\"crown\">\n            <i className=\"fas fa-crown fa-5x my-5 text-pink-300\"></i>\n          </div>\n          {ids.length > 119 ? (\n            <Lipsync\n              handleAnswer={handleAnswer}\n              showAnswers={showAnswers}\n              lipsync={lipsync}\n              queens={queens}\n              nextLipsync={getLipsync} />\n\n          ) : (<End score={score} />)}\n\n        </div>)} />\n      <Route path=\"/lipsyncquiz/about\" exact component={About} />\n      <Redirect from=\"/\" to=\"/lipsyncquiz\" />\n    </Fragment>\n  ) : <div className=\"mt-40\"><Spinner /></div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}